@using Skeleton.Application.Services
@using Skeleton.Application.Services.Item
@using Skeleton.WebApp.Common
@using Skeleton.WebApp.Extensions
@inherits Skeleton.WebApp.Common.MyComponentBase

<MyDialog MudDialog="MudDialog" OnSaveClick="@(async () => await SubmitAsync())">

    <MyForm Model="_requestModel" Validation="_validator.ValidateValue" @ref="_form">
        <MudTextField Label="Name" Variant="MyStyle.TextFieldVariant" @bind-Value="_requestModel.Name"
                      For="@(() => _requestModel.Name)"
        />

        <MudTextField Label="Description" Variant="MyStyle.TextFieldVariant" @bind-Value="_requestModel.Description"
                      For="@(() => _requestModel.Description)"
        />

        <MyItemCategoryAutoComplete @bind-Value="_requestModel.Category"
                                    For="() => _requestModel.Category"/>

    </MyForm>
</MyDialog>

@code {
    [Inject] ISnackbar? Snackbar { get; set; }
    [Inject] IServiceHandler<CreateItemRequest>? CreateItemService { get; set; }

    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    private readonly CreateItemRequest _requestModel = new();
    private readonly CreateItemRequestValidator _validator = new();
    private MyForm? _form;

    private async Task SubmitAsync()
    {
        var formInstance = _form?.GetForm();
        if (formInstance == null)
            return;

        await formInstance.Validate();

        if (!formInstance.IsValid)
            return;

        var response = CreateItemService?.Handle(_requestModel);
        if (!response!.Succeeded)
        {
            Snackbar?.AddFailed(response.Message);
            return;
        }

        Snackbar?.AddCreated(response.Message);
        MudDialog?.Close(DialogResult.Ok(response.Succeeded));
    }
}